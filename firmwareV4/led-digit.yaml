esphome:
  name: seven-seg-test
  friendly_name: Seven Segment Test

esp8266:
  board: d1_mini

logger:

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Seven-Seg-Test"
    password: "configureme"

light:
  - platform: neopixelbus
    type: RGB
    pin: GPIO4
    num_leds: 31
    name: "LED Strip"
    id: led_strip
    variant: WS2812
    default_transition_length: 0s
    restore_mode: ALWAYS_ON
    on_turn_on:
      then:
        - light.turn_on:
            id: led_strip
            effect: "Timer"
    effects:
      - addressable_lambda:
          name: "Timer"
          update_interval: 1000ms
          lambda: |-
            static unsigned long start_time = millis();
            static const unsigned long TIMER_DURATION = 12 * 60 * 1000; // 6 minutes
            static const Color sign_color = Color(255, 0, 255);

            auto displayDigit = [&](int digit, int displayUnit, int ledsPerDigit = 7) {
              static const int DISPLAY_UNIT_INDICES[] = {0, 7, 17, 24};
              int baseIndex = (displayUnit >= 0 && displayUnit < 4) ? DISPLAY_UNIT_INDICES[displayUnit] : 0;
              
              for (int i = baseIndex; i < baseIndex + ledsPerDigit; i++) {
                it[i] = Color(0, 0, 0);
              }
              
              static const uint8_t SEGMENTS[10][7] = {
                {1, 1, 1, 0, 1, 1, 1},    // 0
                {0, 1, 0, 0, 0, 1, 0},    // 1
                {1, 0, 1, 1, 0, 1, 1},    // 2
                {1, 1, 0, 1, 0, 1, 1},    // 3
                {0, 1, 0, 1, 1, 1, 0},    // 4
                {1, 1, 0, 1, 1, 0, 1},    // 5
                {1, 1, 1, 1, 1, 0, 1},    // 6
                {0, 1, 0, 0, 0, 1, 1},    // 7
                {1, 1, 1, 1, 1, 1, 1},    // 8
                {1, 1, 0, 1, 1, 1, 1}     // 9
              };
              
              if (digit >= 0 && digit <= 9) {
                for (int segment = 0; segment < 7; segment++) {
                  if (SEGMENTS[digit][segment]) {
                    switch(displayUnit) {
                      case 0:
                        it[baseIndex + segment] = Color(255, 0, 255);  // Purple
                        break;
                      case 1:
                        it[baseIndex + segment] = Color(255, 0, 255);  // Purple
                        break;
                      case 2:
                        it[baseIndex + segment] = Color(255, 0, 255);  // Purple
                        break;
                      case 3:
                        it[baseIndex + segment] = Color(255, 0, 255);  // Purple
                        break;
                    }
                  }
                }
              }
            };

            // Calculate remaining time
            unsigned long elapsed = millis() - start_time;
            unsigned long remaining = (elapsed >= TIMER_DURATION) ? 0 : (TIMER_DURATION - elapsed);

            // Convert to minutes and seconds
            int minutes = (remaining / 1000) / 60;
            int seconds = (remaining / 1000) % 60;

            // Display minutes and seconds
            displayDigit(minutes / 10, 0);
            displayDigit(minutes % 10, 1);
            displayDigit(seconds / 10, 2);
            displayDigit(seconds % 10, 3);

            // Handle colon LEDs
            static const int COLON_LEDS[] = {14, 16};
            bool colon_on = (elapsed / 500) % 2 == 0;
            for (int i : COLON_LEDS) {
              it[i] = colon_on ? sign_color : Color(0, 0, 0);
            }
            it[15] = Color(0, 0, 0);
